from sklearn import datasets
import pandas as pd
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import os # accessing directory structure
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
plt.style.use('ggplot')

iris=datasets.load_iris()
x=iris.data
y=iris.target
df=pd.DataFrame(x, columns=iris.feature_names)
_=pd.plotting.scatter_matrix(df,c=y,figsize=[8,8],s=150,marker='D')


print(os.listdir('..\..\Downloads\input'))
df_swing = pd.read_csv ('..\..\Downloads\input\k2008_swing_states.csv')
#print(df_swing[['dem_share','state']])

_ =plt.hist(df_swing['dem_share'])
_ =plt.xlabel('percent of vote for ObaMa')
_ =plt.ylabel('number of countries')


#Binning Bias
sns.set()
n_data = len(versicolor_petal_length)
n_bins = np.sqrt(n_data)
n_bins = int(n_bins)
plt.hist(x=versicolor_petal_length, bins=n_bins)
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('count')
plt.show()


#Generate a bee swarm plot
_ = sns.swarmplot(x='species', y='petal length (cm)', data=df)
_ = plt.xlabel('species')
_ = plt.ylabel('petal length (cm)')
plt.show()


"""Compute ECDF for a one-dimensional array of measurements."""
def ecdf(data):
    n = len(df)
    x = np.sort(df)
    y = np.arange(1, n+1) / n

    return x, y
 # Compute ECDF for versicolor data: x_vers, y_vers
x_vers, y_vers = ecdf(versicolor_petal_length)
_=plt.plot(x_vers,y_vers,marker='.',linestyle='none')
_=plt.xlabel('petal length (cm)')
_=plt.ylabel('ECDF')
plt.show()
   
#DEM_share
x,y=ECDF(df_swing['dem_share'])
_=plt.plot(x,y,marker='.',linestyle='none')
_=plt.ylabel('ECDF')
_=plt.xlabel('number of votes for Obama')
plt.show()
   
   
# ECDFs for the petal lengths of all three iris species. 
x_set,y_set=ecdf(setosa_petal_length)
x_vers,y_vers=ecdf(versicolor_petal_length)
x_virg,y_virg=ecdf(virginica_petal_length)
_=plt.plot(x_set, y_set,marker='.',linestyle='none')
_=plt.plot(x_vers,y_vers,marker='.',linestyle='none')
_=plt.plot(x_virg,y_virg,marker='.',linestyle='none')
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')
plt.show()


# Compute the mean: mean_length_vers
mean_length_vers=np.mean(versicolor_petal_length)
# Print the result with some nice formatting
print('I. versicolor:', mean_length_vers, 'cm')


# Specify array of percentiles: percentiles
percentiles=np.array([2.5,25,50,75,97.5])
# Compute percentiles: ptiles_vers
ptiles_vers=np.percentile(versicolor_petal_length, percentiles)
# Print the result
print(ptiles_vers)


# Plot the ECDF
_ = plt.plot(x_vers, y_vers, '.')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')
# Overlay percentiles as red diamonds.
_ = plt.plot(ptiles_vers, percentiles/100, marker='D', color='red',
         linestyle='none')
# Show the plot
plt.show()


# Create box plot with Seaborn's default settings
_=sns.boxplot(y='petal length (cm)',x='species',data=df)
# Label the axes
_=plt.ylabel('petal length (cm)')
_=plt.xlabel('species')
# Show the plot
plt.show()


# Array of differences to mean: differences
differences=versicolor_petal_length-np.mean(versicolor_petal_length)
# Square the differences: diff_sq
diff_sq=differences**2
# Compute the mean square difference: variance_explicit
variance_explicit=np.mean(diff_sq)
# Compute the variance using NumPy: variance_np
variance_np=np.var(versicolor_petal_length)
print(variance_explicit, variance_np)


# Compute the variance: variance
variance=np.var(versicolor_petal_length)
# Print the square root of the variance
print(np.sqrt(variance))
# Print the standard deviation
print(np.std(versicolor_petal_length))


variance=np.mean((df_swing['dem_share']-np.mean(df_swing['dem_share']))**2)
variance1=np.var(df_swing['dem_share'])
print(variance, variance1)

# Make a scatter plot
_=plt.plot(versicolor_petal_length,versicolor_petal_width, marker='.',linestyle='none')
_=plt.ylabel('versicolor_petal_width')
_=plt.xlabel('versicolor_petal_length')
plt.show()


# Compute the covariance matrix: covariance_matrix
covariance_matrix=np.cov(versicolor_petal_length,versicolor_petal_width)
print(covariance_matrix)
# Extract covariance of length and width of petals: petal_cov
petal_cov=covariance_matrix[0,1]
print(petal_cov)


def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""
    corr_mat=np.corrcoef(x,y)
    return corr_mat[0,1]
r=pearson_r(versicolor_petal_length,versicolor_petal_width)
print(r)


